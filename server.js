const express = require('express');
var bodyParser = require('body-parser');
const app = express();
const port = 3000;

const mariadb = require('mariadb');
const pool = mariadb.createPool({
        host : 'localhost',
        user : 'root',
        password: 'root',
        port: 3306,
        connectionLimit:5
});

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const cors = require('cors');

const options = {
    swaggerDefinition :{
        info:{
            title: 'Personal Budget API',
            version: '1.0.0',
            description: 'Personal Budget API autogenerated by'
        },
        host: '137.184.62.170:3000',
        basePath: '/',
    },
    apis: ['./server.js'],
}

const specs = swaggerJsdoc(options);

app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors());

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

/**
 * @swagger
 * /foods:
 *     get:
 *       description: show food item names from from foods table
 *       produces:
 *          - application/json
 *       responses:
 *          200:
 *              description: Food items Sucessfully displayed
*/
app.get('/foods',(req,resp) =>{
    pool.query('SELECT * from sample.foods')
        .then(res => {
                resp.statusCode = 200;
                resp.setHeader('Content-Type','Application/json');
                resp.send(res);
                })
        .catch(err =>{ 
                resp.statusCode = 404;
                console.error('Error Message: ', err.stack);
                resp.setHeader('Content-Type','text/plain');
                resp.send('Error message: ' + err.stack);
        });
});


/**
 * @swagger
 * /agents:
 *  put:
 *    description: Update foods
 *    consumes: 
 *    - application/json
 *    produces:
 *    - application/json
 *    parameters:
 *    - in: body
 *      name: item_id
 *      required: true
 *      schema:
 *        type: string
 *        $ref: "#/definitions/foodsPut"
 *    requestBody:
 *      request: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: "#definitions/foodsPut"
 *    responses: 
 *      200:
 *       description: Successfull!
 * definitions:
 *   foodsPut:
 *     type: object
 *     required:
 *     - item_id
 *     - item_name
 *     - item_unit
 *     - company_id
 *     properties:
 *       item_id:
 *         type: string
 *         example: 10
 *       item_name:
 *         type: string
 *         example: Sandwich
 *       item_unit: 
 *         type: string
 *         example: pcs
 *       company_id:
 *         type: string
 *         example: 16
*/
app.put('/foods', (req,resp) =>{
    pool.query(`update sample.foods set item_name = '${req['body'].item_name}',  item_unit = '${req['body'].item_unit}', company_id  = '${req['body'].company_id}' where item_id = '${req['body'].itemId}'`).then(res => {
                console.log(res.affectedRows);
                if(res.affectedRows > 0)
                {
                        resp.statusCode = 200;
                        resp.setHeader('Content-Type','Application/json');
                        resp.send(res);
                }
                else{
                        resp.statusCode = 201;
                        resp.setHeader('Content-Type','text/plain');
                        resp.send("Failed! The food item is not in the food table.");
                }
              })
        .catch(err =>{
                resp.statusCode = 404;
                console.error('Error Message: ', err.stack);
                resp.setHeader('Content-Type','text/plain');
                resp.send('Error Message: ' + err.stack);
        });
});



/**
 * @swagger
 * /foods:
 *  post:
 *    description: Update foods
 *    consumes:
 *    - application/json
 *    produces:
 *    - application/json
 *    parameters:
 *    - in: body
 *      name: item_id
 *      required: true
 *      schema:
 *        type: string
 *        $ref: "#/definitions/foodsPost"
 *    requestBody:
 *      request: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: "#definitions/foodsPost"
 *    responses:
 *      200:
 *       description: Successfull!
 * definitions:
 *   foodsPost:
 *     type: object
 *     required:
 *     - item_id
 *     - item_name
 *     - item_unit
 *     - company_id
 *     properties:
 *       item_id:
 *         type: string
 *         example: 9
 *       item_name:
 *         type: string
 *         example: Biscuits
 *       item_unit:
 *         type: string
 *         example: pcs
 *       company_id:
 *         type: string
 *         example: 17
*/
app.post('/foods',(req,resp) =>{
    pool.query(`insert into sample.foods values ('${req['body'].item_id}', '${req['body'].item_name}', '${req['body'].item_unit}', '${req['body'].company_id}'`).then(res => {
               console.log(res);
                 if(res.affectedRows > 0){
                        resp.statusCode = 200;
                        resp.setHeader('Content-Type','Application/json');
                        resp.send(res);
                }else{
                        resp.statusCode = 201;
                        resp.setHeader('Content-Type','text/plain');
                        resp.send('Food could not be inserted!');
                }
               })
        .catch(err =>{
                resp.statusCode = 404;
                console.error('Error Message: ', err.stack);
                resp.setHeader('Content-Type','text/plain');
                resp.send('Error Message:' + err.stack);
        });
});

/**
 * @swagger
 * /foods:
 *  delete:
 *    description: delete food
 *    consumes: 
 *    - application/json
 *    produces:
 *    - application/json
 *    parameters:
 *    - in: body
 *      name: name
 *      required: true
 *      schema:
 *        type: string
 *        $ref: "#/definitions/foodsDelete"
 *    responses: 
 *      200:
 *       description: Successfull!
 * definitions:
 *   foodsDelete:
 *     type: object
 *     required:
 *     - item_id
 *     properties:
 *       item_id:
 *         type: string
 *         example: '7'
*/
app.delete('/foods',(req,resp) =>{
    pool.query(`delete from sample.foods where item_id =  ('${req['body'].item_id}')`).then(res => {
               console.log(res);
                 if(res.affectedRows > 0){
                        resp.statusCode = 200;
                        resp.setHeader('Content-Type','Application/json');
                        resp.send(res);
                }else{
                        resp.statusCode = 201;
                        resp.setHeader('Content-Type','text/plain');
                        resp.send('Unable to delete food item!');
                }
               })
        .catch(err =>{
                resp.statusCode = 404;
                console.error('Error Message: ', err.stack);
                resp.setHeader('Content-Type','text/plain');
                resp.send('Error Message: ' + err.stack);
        });
});

/**
 * @swagger
 * /foods:
 *  patch:
 *    description: updates or inserts food item
 *    consumes:
 *    - application/json
 *    produces:
 *    - application/json
 *    parameters:
 *    - in: body
 *      name: item_id
 *      required: true
 *      schema:
 *        type: string
 *        $ref: "#/definitions/foodsPatch"
 *    requestBody:
 *      request: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: "#definitions/foodsPatch"
 *    responses:
 *      200:
 *       description: Successfull!
 * definitions:
 *   foodsPatch:
 *     type: object
 *     required:
 *     - item_id
 *     - item_name
 *     - item_unit
 *     - company_id
 *     properties:
 *       item_id:
 *         type: string
 *         example: 30
 *       item_name:
 *         type: string
 *         example: Cookies
 *       item_unit:
 *         type: string
 *         example: lbs
 *       company_id:
 *         type: string
 *         example: 15
*/
app.patch('/foods',(req,resp) =>{
    pool.query(`update sample.foods set item_name = '${req['body'].item_name}',  item_unit = '${req['body'].item_unit}', company_id  = '${req['body'].company_id}' where item_id = '${req['body'].item_id}'`).then(res => {
                console.log(res.affectedRows);
                if(res.affectedRows > 0)
                {
                        resp.statusCode = 200;
                        resp.setHeader('Content-Type','Application/json');
                        resp.send(res);
                }
                else{
                    pool.query(`insert into sample.foods values('${req['body'].item_id}', '${req['body'].item_name}', '${req['body'].item_unit}', '${req['body'].company_id}'`).then(res1 => {
                        if(res1.affectedRows > 0)
                        {
                            resp.statusCode = 200;                 
                            resp.setHeader('Content-Type','Application/json');
                            resp.send(res1);
                        }
                        else{
                            resp.statusCode = 201;
                            resp.setHeader('Content-Type','text/plain');
                            resp.send("Food item is not found in the foods table.");
                        }
                    })
                    .catch(err =>{
                        resp.statusCode = 404;
                        console.error('Error Message: ', err.stack);
                        resp.setHeader('Content-Type','text/plain');
                        resp.send('Error Message: ' + err.stack);
                    });
                }
              })
        .catch(err =>{
                resp.statusCode = 404;
                console.error('Error Message: ', err.stack);
                resp.setHeader('Content-Type','text/plain');
                resp.send('Error Message: ' + err.stack);
        });
});


app.listen(port, ()=>{
    console.log(`The server running at http://137.184.62.170:${port}`);
});
